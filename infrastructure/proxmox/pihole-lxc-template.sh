#!/usr/bin/env bash
# pihole-lxc-template.sh -- Generated by Copilot
#
# Purpose:
#   Bootstrap a reusable Debian 12 LXC template for Pi-hole with
#   nested virtualization features and net_admin capabilities enabled.
#   The resulting container is converted into a template so that
#   `deploy_pihole_lxc.sh` can clone it for production use.
#
# Usage:
#   sudo ./pihole-lxc-template.sh \
#     --ctid 9200 \
#     --hostname pihole-template \
#     --bridge vmbr1 \
#     --ip 10.10.20.250/18 \
#     --gateway 10.10.20.1 \
#     --vlan 20
#
# Notes:
#   * Requires execution on a Proxmox VE host with `pct` and `pveam`.
#   * Downloads the Debian 12 standard template if missing.
#   * Applies nesting, keyctl, and cap_net_admin capabilities.
#   * Converts the container into a template after applying updates.

set -euo pipefail

TEMPLATE_IMAGE="${TEMPLATE_IMAGE:-debian-12-standard_12.2-1_amd64.tar.zst}"
TEMPLATE_STORAGE="${TEMPLATE_STORAGE:-local}"   # Storage for vzdump templates
ROOTFS_STORAGE="${ROOTFS_STORAGE:-local-lvm}"    # Storage for container rootfs
BRIDGE="vmbr1"
IPV4_ADDRESS="10.10.20.250/18"
GATEWAY="10.10.20.1"
VLAN_TAG="20"
HOSTNAME="pihole-template"
CPU_CORES="2"
MEMORY_MB="1024"
SWAP_MB="0"
CTID=""
REFRESH=0

usage() {
  cat <<'USAGE'
Usage: pihole-lxc-template.sh [options]

Options:
  --ctid <id>            Numeric CT ID to allocate for the template (required).
  --hostname <name>      Container hostname (default: pihole-template).
  --bridge <bridge>      Proxmox bridge to attach (default: vmbr1).
  --ip <cidr>            IPv4 address in CIDR format (default: 10.10.20.250/18).
  --gateway <ip>         IPv4 gateway (default: 10.10.20.1).
  --vlan <tag>           VLAN tag to apply on net0 (default: 20).
  --template-storage <storage>  Storage ID for vzdump templates (default: local).
  --rootfs-storage <storage>    Storage ID for container rootfs (default: local-lvm).
  --cores <count>        Logical cores to assign (default: 2).
  --memory <mb>          RAM in MiB (default: 1024).
  --swap <mb>            Swap in MiB (default: 0).
  --refresh              Force refresh of the Debian template via pveam.
  -h, --help             Show this help message and exit.
USAGE
}

die() {
  echo "[ERROR] $*" >&2
  exit 1
}

require_command() {
  local cmd="$1"
  command -v "$cmd" >/dev/null 2>&1 || die "Command '$cmd' not found. Please install or adjust PATH."
}

append_if_missing() {
  local line="$1"
  local file="$2"
  grep -Fxq "$line" "$file" || echo "$line" >> "$file"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --ctid)
      CTID="${2:-}"
      shift 2
      ;;
    --hostname)
      HOSTNAME="${2:-}"
      shift 2
      ;;
    --bridge)
      BRIDGE="${2:-}"
      shift 2
      ;;
    --ip)
      IPV4_ADDRESS="${2:-}"
      shift 2
      ;;
    --gateway)
      GATEWAY="${2:-}"
      shift 2
      ;;
    --vlan)
      VLAN_TAG="${2:-}"
      shift 2
      ;;
    --template-storage)
      TEMPLATE_STORAGE="${2:-}"
      shift 2
      ;;
    --rootfs-storage)
      ROOTFS_STORAGE="${2:-}"
      shift 2
      ;;
    --cores)
      CPU_CORES="${2:-}"
      shift 2
      ;;
    --memory)
      MEMORY_MB="${2:-}"
      shift 2
      ;;
    --swap)
      SWAP_MB="${2:-}"
      shift 2
      ;;
    --refresh)
      REFRESH=1
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      usage
      die "Unknown option: $1"
      ;;
  esac
done

[[ -n "$CTID" ]] || { usage; die "--ctid is required"; }

[[ $EUID -eq 0 ]] || die "Please run as root on the Proxmox host."

require_command pct
require_command pveam

TEMPLATE_ARCHIVE="/var/lib/vz/template/cache/${TEMPLATE_IMAGE}"

if [[ $REFRESH -eq 1 ]]; then
  echo "[INFO] Refreshing Proxmox template catalog..."
  pveam update >/dev/null
fi

if [[ ! -f "$TEMPLATE_ARCHIVE" ]]; then
  echo "[INFO] Downloading ${TEMPLATE_IMAGE} to storage '${TEMPLATE_STORAGE}'..."
  pveam download "$TEMPLATE_STORAGE" "$TEMPLATE_IMAGE"
fi

if pct status "$CTID" >/dev/null 2>&1; then
  die "CTID ${CTID} already exists. Please remove it or choose another ID."
fi

echo "[INFO] Creating LXC ${CTID} on storage ${ROOTFS_STORAGE}..."
pct create "$CTID" "${TEMPLATE_STORAGE}:vztmpl/${TEMPLATE_IMAGE}" \
  --hostname "$HOSTNAME" \
  --storage "$ROOTFS_STORAGE" \
  --cores "$CPU_CORES" \
  --memory "$MEMORY_MB" \
  --swap "$SWAP_MB" \
  --net0 "name=eth0,bridge=${BRIDGE},firewall=1,gw=${GATEWAY},ip=${IPV4_ADDRESS},tag=${VLAN_TAG}" \
  --ostype debian \
  --unprivileged 0 \
  --start 1

echo "[INFO] Applying container feature flags..."
pct set "$CTID" -features nesting=1,keyctl=1
pct set "$CTID" -features mount=nfs
pct set "$CTID" -features mount=cifs

CT_CONF="/etc/pve/lxc/${CTID}.conf"
append_if_missing "lxc.cap.keep = net_admin" "$CT_CONF"
append_if_missing "lxc.mount.auto = proc sys" "$CT_CONF"
append_if_missing "lxc.apparmor.profile = generated" "$CT_CONF"

echo "[INFO] Installing baseline packages inside CT ${CTID}..."
pct exec "$CTID" -- bash -c "apt-get update && apt-get install -y --no-install-recommends curl dnsutils sudo"
pct exec "$CTID" -- bash -c "apt-get clean && rm -rf /var/lib/apt/lists/*"

echo "[INFO] Halting container ${CTID} before converting to template..."
pct shutdown "$CTID" --forceStop 1 --timeout 120

echo "[INFO] Converting CT ${CTID} into reusable template..."
pct template "$CTID"

echo "[SUCCESS] Template ${CTID} ready. Use deploy_pihole_lxc.sh to clone it for production." 