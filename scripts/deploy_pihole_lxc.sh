#!/usr/bin/env bash
# deploy_pihole_lxc.sh -- Generated by Copilot
#
# Purpose:
#   Clone the reusable Pi-hole Debian 12 template created by
#   `infrastructure/proxmox/pihole-lxc-template.sh`, customize
#   runtime parameters, run an unattended Pi-hole installation, and
#   optionally register a Keepalived health check on the Proxmox host.
#
# Usage example:
#   sudo ./deploy_pihole_lxc.sh \
#     --template-ctid 9200 \
#     --ctid 9210 \
#     --hostname pihole-lxc \
#     --bridge vmbr1 \
#     --ip 10.10.20.10/18 \
#     --gateway 10.10.20.1 \
#     --vlan 20 \
#     --admin-password "super-secret" \
#     --keepalived-config /etc/keepalived/conf.d/pihole-lxc.conf
#
# Notes:
#   * Execute on a Proxmox VE host with `pct` and Keepalived (optional).
#   * The template CT must already exist and be marked as a template.
#   * Network values default to Route PiÂ² VLAN 20 assignments when omitted.

set -euo pipefail

TEMPLATE_CTID=""
TARGET_CTID=""
HOSTNAME="pihole-lxc"
BRIDGE="vmbr1"
IPV4_ADDRESS="10.10.20.10/18"
GATEWAY="10.10.20.1"
VLAN_TAG="20"
ROOTFS_STORAGE="local-lvm"
CPU_CORES="2"
MEMORY_MB="1024"
SWAP_MB="0"
DNS_SERVERS="127.0.0.1;1.1.1.1"
PIHOLE_PASSWORD=""
ENABLE_KEEPALIVED=1
KEEPALIVED_CONFIG="/etc/keepalived/conf.d/pihole-lxc.conf"
KEEPALIVED_SCRIPT_DIR="/etc/keepalived/checks"
KEEPALIVED_INTERVAL="5"
KEEPALIVED_TIMEOUT="3"
KEEPALIVED_FALL="3"
KEEPALIVED_RISE="3"
KEEPALIVED_RELOAD=1

usage() {
  cat <<'USAGE'
Usage: deploy_pihole_lxc.sh [options]

Required:
  --template-ctid <id>   CTID of the Pi-hole template to clone.
  --ctid <id>            CTID for the new Pi-hole container.

Optional:
  --hostname <name>      Container hostname (default: pihole-lxc).
  --bridge <bridge>      Proxmox bridge name (default: vmbr1).
  --ip <cidr>            IPv4 address in CIDR notation (default: 10.10.20.10/18).
  --gateway <ip>         IPv4 gateway (default: 10.10.20.1).
  --vlan <tag>           VLAN tag for net0 (default: 20).
  --storage <id>         Storage ID for rootfs (default: local-lvm).
  --cores <count>        Logical CPU cores (default: 2).
  --memory <mb>          RAM in MiB (default: 1024).
  --swap <mb>            Swap in MiB (default: 0).
  --dns <list>           Semicolon-separated upstream DNS servers (default: 127.0.0.1;1.1.1.1).
  --admin-password <pw>  Pi-hole web UI password (default: randomly generated).
  --keepalived-config <path>  Keepalived config fragment path (default: /etc/keepalived/conf.d/pihole-lxc.conf).
  --keepalived-script-dir <dir>  Directory for health scripts (default: /etc/keepalived/checks).
  --keepalived-interval <sec>   Health check interval (default: 5).
  --keepalived-timeout <sec>    Health check timeout (default: 3).
  --keepalived-fall <count>     Failure threshold (default: 3).
  --keepalived-rise <count>     Success threshold (default: 3).
  --no-keepalived         Skip Keepalived integration.
  --no-keepalived-reload  Do not reload Keepalived after writing configuration.
  -h, --help              Show this help message and exit.

Output:
  At the end of a successful deployment, the script will display the container's hostname, IPv4 address, and Pi-hole admin password for your reference.
USAGE
}

die() {
  echo "[ERROR] $*" >&2
  exit 1
}

require_command() {
  local cmd="$1"
  command -v "$cmd" >/dev/null 2>&1 || die "Command '$cmd' not found. Install it or adjust PATH."
}

random_password() {
  tr -dc 'A-Za-z0-9@#%+=' < /dev/urandom | head -c 24
}

append_if_missing() {
  local block="$1"
  local file="$2"
  mkdir -p "$(dirname "$file")"
  touch "$file"
  grep -Fxq "$block" "$file" || {
    printf '%s\n' "$block" >> "$file"
  }
}

append_block_if_absent() {
  local block="$1"
  local file="$2"
  mkdir -p "$(dirname "$file")"
  touch "$file"
  if ! grep -Fq "$(echo "$block" | head -n1)" "$file"; then
    printf '\n%s\n' "$block" >> "$file"
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --template-ctid)
      TEMPLATE_CTID="${2:-}"
      shift 2
      ;;
    --ctid)
      TARGET_CTID="${2:-}"
      shift 2
      ;;
    --hostname)
      HOSTNAME="${2:-}"
      shift 2
      ;;
    --bridge)
      BRIDGE="${2:-}"
      shift 2
      ;;
    --ip)
      IPV4_ADDRESS="${2:-}"
      shift 2
      ;;
    --gateway)
      GATEWAY="${2:-}"
      shift 2
      ;;
    --vlan)
      VLAN_TAG="${2:-}"
      shift 2
      ;;
    --storage)
      ROOTFS_STORAGE="${2:-}"
      shift 2
      ;;
    --cores)
      CPU_CORES="${2:-}"
      shift 2
      ;;
    --memory)
      MEMORY_MB="${2:-}"
      shift 2
      ;;
    --swap)
      SWAP_MB="${2:-}"
      shift 2
      ;;
    --dns)
      DNS_SERVERS="${2:-}"
      shift 2
      ;;
    --admin-password)
      PIHOLE_PASSWORD="${2:-}"
      shift 2
      ;;
    --keepalived-config)
      KEEPALIVED_CONFIG="${2:-}"
      shift 2
      ;;
    --keepalived-script-dir)
      KEEPALIVED_SCRIPT_DIR="${2:-}"
      shift 2
      ;;
    --keepalived-interval)
      KEEPALIVED_INTERVAL="${2:-}"
      shift 2
      ;;
    --keepalived-timeout)
      KEEPALIVED_TIMEOUT="${2:-}"
      shift 2
      ;;
    --keepalived-fall)
      KEEPALIVED_FALL="${2:-}"
      shift 2
      ;;
    --keepalived-rise)
      KEEPALIVED_RISE="${2:-}"
      shift 2
      ;;
    --no-keepalived)
      ENABLE_KEEPALIVED=0
      shift
      ;;
    --no-keepalived-reload)
      KEEPALIVED_RELOAD=0
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      usage
      die "Unknown option: $1"
      ;;
  esac
done

[[ -n "$TEMPLATE_CTID" ]] || { usage; die "--template-ctid is required"; }
[[ -n "$TARGET_CTID" ]] || { usage; die "--ctid is required"; }

[[ $EUID -eq 0 ]] || die "Please run as root on the Proxmox host."

require_command pct

if pct status "$TARGET_CTID" >/dev/null 2>&1; then
  die "CTID ${TARGET_CTID} already exists. Choose another ID or remove the existing container."
fi

TEMPLATE_CONF="/etc/pve/lxc/${TEMPLATE_CTID}.conf"
[[ -f "$TEMPLATE_CONF" ]] || die "Template configuration ${TEMPLATE_CONF} not found."
grep -q "^template: 1" "$TEMPLATE_CONF" || die "CTID ${TEMPLATE_CTID} is not marked as a template."

echo "[INFO] Cloning template ${TEMPLATE_CTID} to new CT ${TARGET_CTID}..."
pct clone "$TEMPLATE_CTID" "$TARGET_CTID" --hostname "$HOSTNAME" --full 1 --storage "$ROOTFS_STORAGE"

echo "[INFO] Applying compute and network configuration..."
pct set "$TARGET_CTID" \
  -cores "$CPU_CORES" \
  -memory "$MEMORY_MB" \
  -swap "$SWAP_MB" \
  -onboot 1 \
  -net0 "name=eth0,bridge=${BRIDGE},firewall=1,gw=${GATEWAY},ip=${IPV4_ADDRESS},tag=${VLAN_TAG}"

echo "[INFO] Starting container ${TARGET_CTID}..."
pct start "$TARGET_CTID"

echo "[INFO] Waiting for network readiness..."
attempt=0
until pct exec "$TARGET_CTID" -- ping -c 1 -W 2 "$GATEWAY" >/dev/null 2>&1; do
  ((attempt++))
  if [[ $attempt -ge 15 ]]; then
    die "Container network did not come up within expected time."
  fi
  sleep 2
done

if [[ -z "$PIHOLE_PASSWORD" ]]; then
  PIHOLE_PASSWORD="$(random_password)"
  echo "[INFO] Generated Pi-hole admin password: ${PIHOLE_PASSWORD}"
  echo "[INFO] Store this password securely; it will not be shown again."
fi

DNS_PRIMARY="${DNS_SERVERS%%;*}"

SETUP_VARS_CONTENT=$(cat <<EOF
PIHOLE_INTERFACE=eth0
IPV4_ADDRESS=${IPV4_ADDRESS}
IPV6_ADDRESS=
PIHOLE_DNS_1=${DNS_PRIMARY}
PIHOLE_DNS_2=1.1.1.1
QUERY_LOGGING=true
INSTALL_WEB_SERVER=true
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=true
WEBUIBOXEDLAYOUT=traditional
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=true
REV_SERVER=false
WEBPASSWORD=${PIHOLE_PASSWORD}
EOF
)

echo "[INFO] Writing Pi-hole setup configuration..."
pct exec "$TARGET_CTID" -- bash -c "cat <<'EOF' > /etc/pihole/setupVars.conf
${SETUP_VARS_CONTENT}
EOF"

echo "[INFO] Installing Pi-hole unattended (this may take several minutes)..."
pct exec "$TARGET_CTID" -- bash -c "apt-get update && apt-get install -y curl gnupg"
pct exec "$TARGET_CTID" -- bash -c "curl -sSL https://install.pi-hole.net -o /tmp/pihole-install.sh"
pct exec "$TARGET_CTID" -- bash -c "chmod +x /tmp/pihole-install.sh"
pct exec "$TARGET_CTID" -- bash -c "PIHOLE_SKIP_OS_CHECK=true PIHOLE_INSTALL_FLAGS='--unattended' /tmp/pihole-install.sh"
pct exec "$TARGET_CTID" -- bash -c "pihole -a -p <<EOF
pct exec "$TARGET_CTID" -- bash -c "trap 'rm -f /tmp/pihole_pw' EXIT; pihole -a -p < /tmp/pihole_pw"
${PIHOLE_PASSWORD}
EOF"
pct exec "$TARGET_CTID" -- bash -c "rm -f /tmp/pihole-install.sh"

echo "[INFO] Enabling Pi-hole services at boot..."
pct exec "$TARGET_CTID" -- systemctl enable --now pihole-FTL.service lighttpd.service

echo "[INFO] Applying firewall allowances for RFC1918 subnets..."
pct exec "$TARGET_CTID" -- bash -c "cat <<'EOF' >/etc/pihole/custom.list
10.10.20.5	vip.routepi.lan
EOF"

if [[ $ENABLE_KEEPALIVED -eq 1 ]]; then
  require_command keepalived || die "Keepalived not found. Install keepalived or re-run with --no-keepalived."

  HEALTH_SCRIPT_PATH="${KEEPALIVED_SCRIPT_DIR}/pihole-lxc-${TARGET_CTID}.sh"
  echo "[INFO] Creating Keepalived health check at ${HEALTH_SCRIPT_PATH}..."
  mkdir -p "$KEEPALIVED_SCRIPT_DIR"
  cat <<'EOF' > "$HEALTH_SCRIPT_PATH"
#!/usr/bin/env bash
set -euo pipefail
CTID="__TARGET_CTID__"
if ! pct exec "$CTID" -- pihole status >/dev/null 2>&1; then
  exit 1
fi
exit 0
EOF
  sed -i "s/__TARGET_CTID__/${TARGET_CTID}/g" "$HEALTH_SCRIPT_PATH"
  chmod 0750 "$HEALTH_SCRIPT_PATH"

  echo "[INFO] Appending Keepalived configuration block (${KEEPALIVED_CONFIG})..."
  HEALTH_BLOCK=$(cat <<EOF
vrrp_script chk_pihole_lxc_${TARGET_CTID} {
    script "${HEALTH_SCRIPT_PATH}"
    interval ${KEEPALIVED_INTERVAL}
    timeout ${KEEPALIVED_TIMEOUT}
    fall ${KEEPALIVED_FALL}
    rise ${KEEPALIVED_RISE}
}
EOF
  )
  append_block_if_absent "$HEALTH_BLOCK" "$KEEPALIVED_CONFIG"

  if [[ $KEEPALIVED_RELOAD -eq 1 ]]; then
    echo "[INFO] Reloading Keepalived..."
    systemctl reload keepalived
  else
    echo "[WARN] Keepalived reload skipped by request. Reload manually to apply changes."
  fi
fi

echo "[SUCCESS] Pi-hole container ${TARGET_CTID} deployed."
echo "[INFO] Hostname: ${HOSTNAME}"
echo "[INFO] IPv4: ${IPV4_ADDRESS}"
echo "[INFO] Pi-hole Admin Password: ${PIHOLE_PASSWORD}"
echo "[INFO] Access the admin UI at http://${IPV4_ADDRESS%%/*}/admin"